{"version":3,"sources":["components/Header/Login/Login.module.css","components/Header/Login/Login.jsx"],"names":["module","exports","LoginReduxForm","reduxForm","form","validate","handleSubmit","error","captcha","urlCaptcha","pristine","submitting","reset","className","s","check_in","onSubmit","createField","Input","checkbox","commonError","src","alt","go","type","disabled","onClick","loginButton","to","Login","formData","props","login","email","password","rememberMe","prevProps","prevState","snapshot","this","isLogin","initializationTriM","React","Component","connect","state","auth","setCaptcha"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,SAAW,wBAAwB,SAAW,wBAAwB,KAAO,oBAAoB,SAAW,wBAAwB,OAAS,sBAAsB,WAAa,0BAA0B,cAAgB,6BAA6B,YAAc,2BAA2B,YAAc,6B,uLCgEzVC,EAAiBC,YAAU,CAACC,KAAM,YAAaC,cAA9BF,EAvDL,SAAC,GAA6E,IAA5EG,EAA2E,EAA3EA,aAAcC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,MAC9E,OACI,6BACI,yBAAKC,UAAWC,IAAEC,UACd,0BAAMF,UAAWC,IAAEV,KAAMY,SAAUV,GAC9BW,YAAY,KAAMC,IAAO,QAAS,QAAS,QAAS,MACpDD,YAAY,KAAMC,IAAO,WAAY,WAAY,WAAY,MAC7DD,YAAYH,IAAEK,SAAUD,IAAO,WAAY,aAAc,KAAM,gBAE/DX,GACD,yBAAKM,UAAWC,IAAEM,aACbb,GAGJC,GAAW,yBAAKK,UAAWC,IAAEN,SAAS,yBAAKa,IAAKZ,EAAYa,IAAI,MAChEd,GAAW,6BAAMS,YAAY,KAAMC,IAAO,OAAQ,UAAW,UAAW,OAEzE,yBAAKL,UAAWC,IAAES,IACd,4BAAQC,KAAK,SAASC,SAAUf,GAAYC,EAAYe,QAASd,GAAjE,gBACA,4BAAQY,KAAK,SAASX,UAAWC,IAAEa,aAAnC,SACA,kBAAC,IAAD,CAASC,GAAG,KAAZ,wBAEJ,6BACI,oDAA4B,6BAC5B,qCAFJ,wBAEsC,6BAClC,wCAHJ,oBAoCdC,E,2MAMFb,SAAW,SAACc,GAER,EAAKC,MAAMC,MAAMF,EAASG,MAAOH,EAASI,SAAUJ,EAASK,WAAYL,EAAStB,U,+HAGnE4B,EAAWC,EAAWC,GACjCC,KAAKR,MAAMS,UAAYJ,EAAUI,SACrCD,KAAKR,MAAMU,uB,+BAKX,OAAIF,KAAKR,MAAMS,QACJ,kBAAC,IAAD,CAAUZ,GAAI,aAIrB,yBAAKf,UAAaC,IAAEkB,OAChB,kBAAC9B,EAAD,CAAgBc,SAAUuB,KAAKvB,SAAUP,WAAY8B,KAAKR,MAAMtB,WAAYD,QAAS+B,KAAKR,MAAMvB,e,GAxB5FkC,IAAMC,WAuCXC,uBAPO,SAACC,GAAD,MAAY,CAC9BL,QAASK,EAAMC,KAAKN,QACpBhC,QAASqC,EAAMC,KAAKtC,QACpBC,WAAYoC,EAAMC,KAAKrC,cAIc,CAACuB,UAAOe,eAAYN,wBAA9CG,CAAmEf","file":"static/js/5.75fecd61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1raa9\",\"check_in\":\"Login_check_in__3vwPL\",\"register\":\"Login_register__Y7s27\",\"form\":\"Login_form__3A-gp\",\"checkbox\":\"Login_checkbox__2aE-t\",\"header\":\"Login_header__8fHXP\",\"header_top\":\"Login_header_top__1CWUb\",\"header_bottom\":\"Login_header_bottom__1FuvR\",\"commonError\":\"Login_commonError__1GFHh\",\"loginButton\":\"Login_loginButton__2_ngu\"};","import React from 'react'\r\nimport s from './Login.module.css'\r\nimport { reduxForm } from 'redux-form'\r\nimport {Input, validate} from \"../../Validations\";\r\nimport {login, setCaptcha} from \"../../../redux/auth_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {createField} from \"../../../object_helpers/object_helpers\";\r\nimport {initializationTriM} from \"../../../redux/trim_reducer\";\r\n\r\nlet LoginForm = ({handleSubmit, error, captcha, urlCaptcha, pristine, submitting, reset}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.check_in}>\r\n                <form className={s.form} onSubmit={handleSubmit}>\r\n                    {createField(null, Input, 'email', 'email', 'email', null )}\r\n                    {createField(null, Input, 'password', 'password', 'password', null )}\r\n                    {createField(s.checkbox, Input, 'checkbox', 'rememberMe', null, 'remember me ')}\r\n                    {/*---------------common_error-------------------*/}\r\n                    {error &&\r\n                    <div className={s.commonError}>\r\n                        {error}\r\n                    </div>}\r\n                    {/*---------------captcha-------------------------*/}\r\n                    {captcha && <div className={s.captcha}><img src={urlCaptcha} alt=\"\"/></div>}\r\n                    {captcha && <div>{createField(null, Input, 'text', 'captcha', 'captcha', null)}</div>}\r\n\r\n                    <div className={s.go}>\r\n                        <button type='button' disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n                        <button type='submit' className={s.loginButton}>Login</button>\r\n                        <NavLink to='/'>Forgot the password</NavLink>\r\n                    </div>\r\n                    <div>\r\n                        <u>data of test account:</u><br/>\r\n                        <b>Email:</b> margokomilfo@mail.ru<br/>\r\n                        <b>Password:</b> 123456789\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n// let RegisterForm = ({handleSubmit,pristine,submitting,reset }) => {\r\n//     return (\r\n//         <div className={s.register}>\r\n//             <div className={s.header}>\r\n//                 <div className={s.header_top}>Впервые в 3Msocial? </div>\r\n//                 <div className={s.header_bottom}>Моментальная регистрация </div>\r\n//                 <div>DOESN'T WORK!!!</div>\r\n//             </div>\r\n//             <form className={s.form} onSubmit={handleSubmit}>\r\n//                 {createField(null, Input, 'text', 'registerEmail', \"email\", null)}\r\n//                 {createField(null, Input, 'password', 'registerPassword1', 'password', null )}\r\n//                 {createField(null, Input, 'password', 'registerPassword2', 'password', null )}\r\n//                 <div className={s.go}>\r\n//                     <button type='submit' className={s.loginButton}>Login</button>\r\n//                     <button type='button' disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n//                 </div>\r\n//             </form>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nlet LoginReduxForm = reduxForm({form: 'loginForm', validate})(LoginForm)\r\n// let RegisterReduxForm = reduxForm({form: 'registerForm', validate})(RegisterForm)\r\n\r\nclass Login extends React.Component{\r\n\r\n    componentDidMount() {\r\n        //this.props.initializationTriM();\r\n    }\r\n\r\n    onSubmit = (formData) => {\r\n        debugger\r\n        this.props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.isLogin !== prevProps.isLogin) {\r\n        this.props.initializationTriM()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isLogin) {\r\n            return <Redirect to={'/welcome'}/>\r\n        }\r\n        return (\r\n\r\n            <div className = {s.login}>\r\n                <LoginReduxForm onSubmit={this.onSubmit} urlCaptcha={this.props.urlCaptcha} captcha={this.props.captcha} />\r\n                {/*<RegisterReduxForm onSubmit={this.onSubmit}/>*/}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isLogin: state.auth.isLogin,\r\n    captcha: state.auth.captcha,\r\n    urlCaptcha: state.auth.urlCaptcha\r\n\r\n\r\n});\r\nexport default connect (mapStateToProps, {login, setCaptcha, initializationTriM})(Login)\r\n"],"sourceRoot":""}